// 9.1
// デッドコード、YAGNI原則

void main() {
  int level = 50;

  // levelが99にならないようにする
  if (level > 99) {
    level = 99;
  }

  // 色々なロジック

  if (level == 1) {
    print("レベル1の時の処理");
  } else if (level == 100) {
    /* 
    [BAD]
    絶対に辿り着かないコード

    「絶対に辿り着かない」ということが分かるのは
    「プロジェクト全体のソースコードを把握した後」だから分かること

    書いてある以上、levelが100の時のことも考慮し続けることになる

    仕様変更でlevelが100も含まれた時も、
    これまで100がなかったのだからコードを「追記する」という意識しかない
    50箇所でlevel100の時の処理を追記していって安心かと思ったら、
    まさかここみたいに使ってない部分で100のときの分岐があって改修忘れが起きる

    テスト時にコードが全部動かないとリリースできないような契約の場合もある
    そうなるとどこのコードがテストされてないのか調査に時間が取られる

    先を見越したつもりで用意したソースはほぼ100%必要な時にはそのまま使えない
    どうせ他にやることもあるんだからそんな使わない準備には時間をかけない方がいい
    */
    print("レベル100の時の処理");
  }
}